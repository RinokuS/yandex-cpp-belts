// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: router.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_router_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_router_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_router_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_router_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_router_2eproto;
namespace ProtoTransport {
class Edge;
class EdgeDefaultTypeInternal;
extern EdgeDefaultTypeInternal _Edge_default_instance_;
class EdgeInfo;
class EdgeInfoDefaultTypeInternal;
extern EdgeInfoDefaultTypeInternal _EdgeInfo_default_instance_;
class RouteData;
class RouteDataDefaultTypeInternal;
extern RouteDataDefaultTypeInternal _RouteData_default_instance_;
class Router;
class RouterDefaultTypeInternal;
extern RouterDefaultTypeInternal _Router_default_instance_;
class RoutesData;
class RoutesDataDefaultTypeInternal;
extern RoutesDataDefaultTypeInternal _RoutesData_default_instance_;
}  // namespace ProtoTransport
PROTOBUF_NAMESPACE_OPEN
template<> ::ProtoTransport::Edge* Arena::CreateMaybeMessage<::ProtoTransport::Edge>(Arena*);
template<> ::ProtoTransport::EdgeInfo* Arena::CreateMaybeMessage<::ProtoTransport::EdgeInfo>(Arena*);
template<> ::ProtoTransport::RouteData* Arena::CreateMaybeMessage<::ProtoTransport::RouteData>(Arena*);
template<> ::ProtoTransport::Router* Arena::CreateMaybeMessage<::ProtoTransport::Router>(Arena*);
template<> ::ProtoTransport::RoutesData* Arena::CreateMaybeMessage<::ProtoTransport::RoutesData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ProtoTransport {

// ===================================================================

class Edge PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoTransport.Edge) */ {
 public:
  inline Edge() : Edge(nullptr) {}
  virtual ~Edge();

  Edge(const Edge& from);
  Edge(Edge&& from) noexcept
    : Edge() {
    *this = ::std::move(from);
  }

  inline Edge& operator=(const Edge& from) {
    CopyFrom(from);
    return *this;
  }
  inline Edge& operator=(Edge&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Edge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Edge* internal_default_instance() {
    return reinterpret_cast<const Edge*>(
               &_Edge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Edge& a, Edge& b) {
    a.Swap(&b);
  }
  inline void Swap(Edge* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Edge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Edge* New() const final {
    return CreateMaybeMessage<Edge>(nullptr);
  }

  Edge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Edge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Edge& from);
  void MergeFrom(const Edge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Edge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoTransport.Edge";
  }
  protected:
  explicit Edge(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_router_2eproto);
    return ::descriptor_table_router_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kTimeFieldNumber = 3,
  };
  // uint32 from = 1;
  void clear_from();
  ::PROTOBUF_NAMESPACE_ID::uint32 from() const;
  void set_from(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_from() const;
  void _internal_set_from(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 to = 2;
  void clear_to();
  ::PROTOBUF_NAMESPACE_ID::uint32 to() const;
  void set_to(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_to() const;
  void _internal_set_to(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double time = 3;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoTransport.Edge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 from_;
  ::PROTOBUF_NAMESPACE_ID::uint32 to_;
  double time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class EdgeInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoTransport.EdgeInfo) */ {
 public:
  inline EdgeInfo() : EdgeInfo(nullptr) {}
  virtual ~EdgeInfo();

  EdgeInfo(const EdgeInfo& from);
  EdgeInfo(EdgeInfo&& from) noexcept
    : EdgeInfo() {
    *this = ::std::move(from);
  }

  inline EdgeInfo& operator=(const EdgeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdgeInfo& operator=(EdgeInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EdgeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EdgeInfo* internal_default_instance() {
    return reinterpret_cast<const EdgeInfo*>(
               &_EdgeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EdgeInfo& a, EdgeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EdgeInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdgeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EdgeInfo* New() const final {
    return CreateMaybeMessage<EdgeInfo>(nullptr);
  }

  EdgeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EdgeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EdgeInfo& from);
  void MergeFrom(const EdgeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdgeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoTransport.EdgeInfo";
  }
  protected:
  explicit EdgeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_router_2eproto);
    return ::descriptor_table_router_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemNameFieldNumber = 2,
    kTypeFieldNumber = 1,
    kSpanCountFieldNumber = 3,
    kStopFromFieldNumber = 4,
    kStopToFieldNumber = 5,
  };
  // string item_name = 2;
  void clear_item_name();
  const std::string& item_name() const;
  void set_item_name(const std::string& value);
  void set_item_name(std::string&& value);
  void set_item_name(const char* value);
  void set_item_name(const char* value, size_t size);
  std::string* mutable_item_name();
  std::string* release_item_name();
  void set_allocated_item_name(std::string* item_name);
  private:
  const std::string& _internal_item_name() const;
  void _internal_set_item_name(const std::string& value);
  std::string* _internal_mutable_item_name();
  public:

  // bool type = 1;
  void clear_type();
  bool type() const;
  void set_type(bool value);
  private:
  bool _internal_type() const;
  void _internal_set_type(bool value);
  public:

  // int32 span_count = 3;
  void clear_span_count();
  ::PROTOBUF_NAMESPACE_ID::int32 span_count() const;
  void set_span_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_span_count() const;
  void _internal_set_span_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 stop_from = 4;
  void clear_stop_from();
  ::PROTOBUF_NAMESPACE_ID::uint32 stop_from() const;
  void set_stop_from(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stop_from() const;
  void _internal_set_stop_from(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 stop_to = 5;
  void clear_stop_to();
  ::PROTOBUF_NAMESPACE_ID::uint32 stop_to() const;
  void set_stop_to(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stop_to() const;
  void _internal_set_stop_to(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoTransport.EdgeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_name_;
  bool type_;
  ::PROTOBUF_NAMESPACE_ID::int32 span_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stop_from_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stop_to_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class RouteData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoTransport.RouteData) */ {
 public:
  inline RouteData() : RouteData(nullptr) {}
  virtual ~RouteData();

  RouteData(const RouteData& from);
  RouteData(RouteData&& from) noexcept
    : RouteData() {
    *this = ::std::move(from);
  }

  inline RouteData& operator=(const RouteData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteData& operator=(RouteData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteData* internal_default_instance() {
    return reinterpret_cast<const RouteData*>(
               &_RouteData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RouteData& a, RouteData& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteData* New() const final {
    return CreateMaybeMessage<RouteData>(nullptr);
  }

  RouteData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteData& from);
  void MergeFrom(const RouteData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoTransport.RouteData";
  }
  protected:
  explicit RouteData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_router_2eproto);
    return ::descriptor_table_router_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFieldNumber = 1,
    kPrevEdgeFieldNumber = 2,
    kIdxFieldNumber = 3,
  };
  // double weight = 1;
  void clear_weight();
  double weight() const;
  void set_weight(double value);
  private:
  double _internal_weight() const;
  void _internal_set_weight(double value);
  public:

  // int32 prev_edge = 2;
  void clear_prev_edge();
  ::PROTOBUF_NAMESPACE_ID::int32 prev_edge() const;
  void set_prev_edge(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prev_edge() const;
  void _internal_set_prev_edge(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 idx = 3;
  void clear_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_idx() const;
  void _internal_set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoTransport.RouteData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double weight_;
  ::PROTOBUF_NAMESPACE_ID::int32 prev_edge_;
  ::PROTOBUF_NAMESPACE_ID::int32 idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class RoutesData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoTransport.RoutesData) */ {
 public:
  inline RoutesData() : RoutesData(nullptr) {}
  virtual ~RoutesData();

  RoutesData(const RoutesData& from);
  RoutesData(RoutesData&& from) noexcept
    : RoutesData() {
    *this = ::std::move(from);
  }

  inline RoutesData& operator=(const RoutesData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutesData& operator=(RoutesData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoutesData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoutesData* internal_default_instance() {
    return reinterpret_cast<const RoutesData*>(
               &_RoutesData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RoutesData& a, RoutesData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutesData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutesData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoutesData* New() const final {
    return CreateMaybeMessage<RoutesData>(nullptr);
  }

  RoutesData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoutesData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoutesData& from);
  void MergeFrom(const RoutesData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutesData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoTransport.RoutesData";
  }
  protected:
  explicit RoutesData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_router_2eproto);
    return ::descriptor_table_router_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .ProtoTransport.RouteData data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::ProtoTransport::RouteData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoTransport::RouteData >*
      mutable_data();
  private:
  const ::ProtoTransport::RouteData& _internal_data(int index) const;
  ::ProtoTransport::RouteData* _internal_add_data();
  public:
  const ::ProtoTransport::RouteData& data(int index) const;
  ::ProtoTransport::RouteData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoTransport::RouteData >&
      data() const;

  // @@protoc_insertion_point(class_scope:ProtoTransport.RoutesData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoTransport::RouteData > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class Router PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoTransport.Router) */ {
 public:
  inline Router() : Router(nullptr) {}
  virtual ~Router();

  Router(const Router& from);
  Router(Router&& from) noexcept
    : Router() {
    *this = ::std::move(from);
  }

  inline Router& operator=(const Router& from) {
    CopyFrom(from);
    return *this;
  }
  inline Router& operator=(Router&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Router& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Router* internal_default_instance() {
    return reinterpret_cast<const Router*>(
               &_Router_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Router& a, Router& b) {
    a.Swap(&b);
  }
  inline void Swap(Router* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Router* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Router* New() const final {
    return CreateMaybeMessage<Router>(nullptr);
  }

  Router* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Router>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Router& from);
  void MergeFrom(const Router& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Router* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoTransport.Router";
  }
  protected:
  explicit Router(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_router_2eproto);
    return ::descriptor_table_router_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgesFieldNumber = 2,
    kEdgesInfoFieldNumber = 3,
    kRoutesDataFieldNumber = 4,
    kVertexCountFieldNumber = 1,
    kRoutesColSizeFieldNumber = 5,
  };
  // repeated .ProtoTransport.Edge edges = 2;
  int edges_size() const;
  private:
  int _internal_edges_size() const;
  public:
  void clear_edges();
  ::ProtoTransport::Edge* mutable_edges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoTransport::Edge >*
      mutable_edges();
  private:
  const ::ProtoTransport::Edge& _internal_edges(int index) const;
  ::ProtoTransport::Edge* _internal_add_edges();
  public:
  const ::ProtoTransport::Edge& edges(int index) const;
  ::ProtoTransport::Edge* add_edges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoTransport::Edge >&
      edges() const;

  // repeated .ProtoTransport.EdgeInfo edges_info = 3;
  int edges_info_size() const;
  private:
  int _internal_edges_info_size() const;
  public:
  void clear_edges_info();
  ::ProtoTransport::EdgeInfo* mutable_edges_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoTransport::EdgeInfo >*
      mutable_edges_info();
  private:
  const ::ProtoTransport::EdgeInfo& _internal_edges_info(int index) const;
  ::ProtoTransport::EdgeInfo* _internal_add_edges_info();
  public:
  const ::ProtoTransport::EdgeInfo& edges_info(int index) const;
  ::ProtoTransport::EdgeInfo* add_edges_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoTransport::EdgeInfo >&
      edges_info() const;

  // repeated .ProtoTransport.RoutesData routes_data = 4;
  int routes_data_size() const;
  private:
  int _internal_routes_data_size() const;
  public:
  void clear_routes_data();
  ::ProtoTransport::RoutesData* mutable_routes_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoTransport::RoutesData >*
      mutable_routes_data();
  private:
  const ::ProtoTransport::RoutesData& _internal_routes_data(int index) const;
  ::ProtoTransport::RoutesData* _internal_add_routes_data();
  public:
  const ::ProtoTransport::RoutesData& routes_data(int index) const;
  ::ProtoTransport::RoutesData* add_routes_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoTransport::RoutesData >&
      routes_data() const;

  // int32 vertex_count = 1;
  void clear_vertex_count();
  ::PROTOBUF_NAMESPACE_ID::int32 vertex_count() const;
  void set_vertex_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vertex_count() const;
  void _internal_set_vertex_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 routes_col_size = 5;
  void clear_routes_col_size();
  ::PROTOBUF_NAMESPACE_ID::int32 routes_col_size() const;
  void set_routes_col_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_routes_col_size() const;
  void _internal_set_routes_col_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoTransport.Router)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoTransport::Edge > edges_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoTransport::EdgeInfo > edges_info_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoTransport::RoutesData > routes_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 vertex_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 routes_col_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_router_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Edge

// uint32 from = 1;
inline void Edge::clear_from() {
  from_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Edge::_internal_from() const {
  return from_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Edge::from() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.Edge.from)
  return _internal_from();
}
inline void Edge::_internal_set_from(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  from_ = value;
}
inline void Edge::set_from(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:ProtoTransport.Edge.from)
}

// uint32 to = 2;
inline void Edge::clear_to() {
  to_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Edge::_internal_to() const {
  return to_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Edge::to() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.Edge.to)
  return _internal_to();
}
inline void Edge::_internal_set_to(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  to_ = value;
}
inline void Edge::set_to(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:ProtoTransport.Edge.to)
}

// double time = 3;
inline void Edge::clear_time() {
  time_ = 0;
}
inline double Edge::_internal_time() const {
  return time_;
}
inline double Edge::time() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.Edge.time)
  return _internal_time();
}
inline void Edge::_internal_set_time(double value) {
  
  time_ = value;
}
inline void Edge::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:ProtoTransport.Edge.time)
}

// -------------------------------------------------------------------

// EdgeInfo

// bool type = 1;
inline void EdgeInfo::clear_type() {
  type_ = false;
}
inline bool EdgeInfo::_internal_type() const {
  return type_;
}
inline bool EdgeInfo::type() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.EdgeInfo.type)
  return _internal_type();
}
inline void EdgeInfo::_internal_set_type(bool value) {
  
  type_ = value;
}
inline void EdgeInfo::set_type(bool value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ProtoTransport.EdgeInfo.type)
}

// string item_name = 2;
inline void EdgeInfo::clear_item_name() {
  item_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EdgeInfo::item_name() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.EdgeInfo.item_name)
  return _internal_item_name();
}
inline void EdgeInfo::set_item_name(const std::string& value) {
  _internal_set_item_name(value);
  // @@protoc_insertion_point(field_set:ProtoTransport.EdgeInfo.item_name)
}
inline std::string* EdgeInfo::mutable_item_name() {
  // @@protoc_insertion_point(field_mutable:ProtoTransport.EdgeInfo.item_name)
  return _internal_mutable_item_name();
}
inline const std::string& EdgeInfo::_internal_item_name() const {
  return item_name_.Get();
}
inline void EdgeInfo::_internal_set_item_name(const std::string& value) {
  
  item_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EdgeInfo::set_item_name(std::string&& value) {
  
  item_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProtoTransport.EdgeInfo.item_name)
}
inline void EdgeInfo::set_item_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  item_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ProtoTransport.EdgeInfo.item_name)
}
inline void EdgeInfo::set_item_name(const char* value,
    size_t size) {
  
  item_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProtoTransport.EdgeInfo.item_name)
}
inline std::string* EdgeInfo::_internal_mutable_item_name() {
  
  return item_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EdgeInfo::release_item_name() {
  // @@protoc_insertion_point(field_release:ProtoTransport.EdgeInfo.item_name)
  return item_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EdgeInfo::set_allocated_item_name(std::string* item_name) {
  if (item_name != nullptr) {
    
  } else {
    
  }
  item_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), item_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProtoTransport.EdgeInfo.item_name)
}

// int32 span_count = 3;
inline void EdgeInfo::clear_span_count() {
  span_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EdgeInfo::_internal_span_count() const {
  return span_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EdgeInfo::span_count() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.EdgeInfo.span_count)
  return _internal_span_count();
}
inline void EdgeInfo::_internal_set_span_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  span_count_ = value;
}
inline void EdgeInfo::set_span_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_span_count(value);
  // @@protoc_insertion_point(field_set:ProtoTransport.EdgeInfo.span_count)
}

// uint32 stop_from = 4;
inline void EdgeInfo::clear_stop_from() {
  stop_from_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EdgeInfo::_internal_stop_from() const {
  return stop_from_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EdgeInfo::stop_from() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.EdgeInfo.stop_from)
  return _internal_stop_from();
}
inline void EdgeInfo::_internal_set_stop_from(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  stop_from_ = value;
}
inline void EdgeInfo::set_stop_from(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stop_from(value);
  // @@protoc_insertion_point(field_set:ProtoTransport.EdgeInfo.stop_from)
}

// uint32 stop_to = 5;
inline void EdgeInfo::clear_stop_to() {
  stop_to_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EdgeInfo::_internal_stop_to() const {
  return stop_to_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EdgeInfo::stop_to() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.EdgeInfo.stop_to)
  return _internal_stop_to();
}
inline void EdgeInfo::_internal_set_stop_to(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  stop_to_ = value;
}
inline void EdgeInfo::set_stop_to(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stop_to(value);
  // @@protoc_insertion_point(field_set:ProtoTransport.EdgeInfo.stop_to)
}

// -------------------------------------------------------------------

// RouteData

// int32 idx = 3;
inline void RouteData::clear_idx() {
  idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RouteData::_internal_idx() const {
  return idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RouteData::idx() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.RouteData.idx)
  return _internal_idx();
}
inline void RouteData::_internal_set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  idx_ = value;
}
inline void RouteData::set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:ProtoTransport.RouteData.idx)
}

// double weight = 1;
inline void RouteData::clear_weight() {
  weight_ = 0;
}
inline double RouteData::_internal_weight() const {
  return weight_;
}
inline double RouteData::weight() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.RouteData.weight)
  return _internal_weight();
}
inline void RouteData::_internal_set_weight(double value) {
  
  weight_ = value;
}
inline void RouteData::set_weight(double value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:ProtoTransport.RouteData.weight)
}

// int32 prev_edge = 2;
inline void RouteData::clear_prev_edge() {
  prev_edge_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RouteData::_internal_prev_edge() const {
  return prev_edge_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RouteData::prev_edge() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.RouteData.prev_edge)
  return _internal_prev_edge();
}
inline void RouteData::_internal_set_prev_edge(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  prev_edge_ = value;
}
inline void RouteData::set_prev_edge(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prev_edge(value);
  // @@protoc_insertion_point(field_set:ProtoTransport.RouteData.prev_edge)
}

// -------------------------------------------------------------------

// RoutesData

// repeated .ProtoTransport.RouteData data = 1;
inline int RoutesData::_internal_data_size() const {
  return data_.size();
}
inline int RoutesData::data_size() const {
  return _internal_data_size();
}
inline void RoutesData::clear_data() {
  data_.Clear();
}
inline ::ProtoTransport::RouteData* RoutesData::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoTransport.RoutesData.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoTransport::RouteData >*
RoutesData::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ProtoTransport.RoutesData.data)
  return &data_;
}
inline const ::ProtoTransport::RouteData& RoutesData::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::ProtoTransport::RouteData& RoutesData::data(int index) const {
  // @@protoc_insertion_point(field_get:ProtoTransport.RoutesData.data)
  return _internal_data(index);
}
inline ::ProtoTransport::RouteData* RoutesData::_internal_add_data() {
  return data_.Add();
}
inline ::ProtoTransport::RouteData* RoutesData::add_data() {
  // @@protoc_insertion_point(field_add:ProtoTransport.RoutesData.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoTransport::RouteData >&
RoutesData::data() const {
  // @@protoc_insertion_point(field_list:ProtoTransport.RoutesData.data)
  return data_;
}

// -------------------------------------------------------------------

// Router

// int32 vertex_count = 1;
inline void Router::clear_vertex_count() {
  vertex_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Router::_internal_vertex_count() const {
  return vertex_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Router::vertex_count() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.Router.vertex_count)
  return _internal_vertex_count();
}
inline void Router::_internal_set_vertex_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vertex_count_ = value;
}
inline void Router::set_vertex_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vertex_count(value);
  // @@protoc_insertion_point(field_set:ProtoTransport.Router.vertex_count)
}

// repeated .ProtoTransport.Edge edges = 2;
inline int Router::_internal_edges_size() const {
  return edges_.size();
}
inline int Router::edges_size() const {
  return _internal_edges_size();
}
inline void Router::clear_edges() {
  edges_.Clear();
}
inline ::ProtoTransport::Edge* Router::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoTransport.Router.edges)
  return edges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoTransport::Edge >*
Router::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:ProtoTransport.Router.edges)
  return &edges_;
}
inline const ::ProtoTransport::Edge& Router::_internal_edges(int index) const {
  return edges_.Get(index);
}
inline const ::ProtoTransport::Edge& Router::edges(int index) const {
  // @@protoc_insertion_point(field_get:ProtoTransport.Router.edges)
  return _internal_edges(index);
}
inline ::ProtoTransport::Edge* Router::_internal_add_edges() {
  return edges_.Add();
}
inline ::ProtoTransport::Edge* Router::add_edges() {
  // @@protoc_insertion_point(field_add:ProtoTransport.Router.edges)
  return _internal_add_edges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoTransport::Edge >&
Router::edges() const {
  // @@protoc_insertion_point(field_list:ProtoTransport.Router.edges)
  return edges_;
}

// repeated .ProtoTransport.EdgeInfo edges_info = 3;
inline int Router::_internal_edges_info_size() const {
  return edges_info_.size();
}
inline int Router::edges_info_size() const {
  return _internal_edges_info_size();
}
inline void Router::clear_edges_info() {
  edges_info_.Clear();
}
inline ::ProtoTransport::EdgeInfo* Router::mutable_edges_info(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoTransport.Router.edges_info)
  return edges_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoTransport::EdgeInfo >*
Router::mutable_edges_info() {
  // @@protoc_insertion_point(field_mutable_list:ProtoTransport.Router.edges_info)
  return &edges_info_;
}
inline const ::ProtoTransport::EdgeInfo& Router::_internal_edges_info(int index) const {
  return edges_info_.Get(index);
}
inline const ::ProtoTransport::EdgeInfo& Router::edges_info(int index) const {
  // @@protoc_insertion_point(field_get:ProtoTransport.Router.edges_info)
  return _internal_edges_info(index);
}
inline ::ProtoTransport::EdgeInfo* Router::_internal_add_edges_info() {
  return edges_info_.Add();
}
inline ::ProtoTransport::EdgeInfo* Router::add_edges_info() {
  // @@protoc_insertion_point(field_add:ProtoTransport.Router.edges_info)
  return _internal_add_edges_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoTransport::EdgeInfo >&
Router::edges_info() const {
  // @@protoc_insertion_point(field_list:ProtoTransport.Router.edges_info)
  return edges_info_;
}

// repeated .ProtoTransport.RoutesData routes_data = 4;
inline int Router::_internal_routes_data_size() const {
  return routes_data_.size();
}
inline int Router::routes_data_size() const {
  return _internal_routes_data_size();
}
inline void Router::clear_routes_data() {
  routes_data_.Clear();
}
inline ::ProtoTransport::RoutesData* Router::mutable_routes_data(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoTransport.Router.routes_data)
  return routes_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoTransport::RoutesData >*
Router::mutable_routes_data() {
  // @@protoc_insertion_point(field_mutable_list:ProtoTransport.Router.routes_data)
  return &routes_data_;
}
inline const ::ProtoTransport::RoutesData& Router::_internal_routes_data(int index) const {
  return routes_data_.Get(index);
}
inline const ::ProtoTransport::RoutesData& Router::routes_data(int index) const {
  // @@protoc_insertion_point(field_get:ProtoTransport.Router.routes_data)
  return _internal_routes_data(index);
}
inline ::ProtoTransport::RoutesData* Router::_internal_add_routes_data() {
  return routes_data_.Add();
}
inline ::ProtoTransport::RoutesData* Router::add_routes_data() {
  // @@protoc_insertion_point(field_add:ProtoTransport.Router.routes_data)
  return _internal_add_routes_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoTransport::RoutesData >&
Router::routes_data() const {
  // @@protoc_insertion_point(field_list:ProtoTransport.Router.routes_data)
  return routes_data_;
}

// int32 routes_col_size = 5;
inline void Router::clear_routes_col_size() {
  routes_col_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Router::_internal_routes_col_size() const {
  return routes_col_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Router::routes_col_size() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.Router.routes_col_size)
  return _internal_routes_col_size();
}
inline void Router::_internal_set_routes_col_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  routes_col_size_ = value;
}
inline void Router::set_routes_col_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_routes_col_size(value);
  // @@protoc_insertion_point(field_set:ProtoTransport.Router.routes_col_size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoTransport

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_router_2eproto
