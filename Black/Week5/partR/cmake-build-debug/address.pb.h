// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: address.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_address_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_address_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "sphere.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_address_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_address_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_address_2eproto;
namespace YellowPages {
class Address;
class AddressDefaultTypeInternal;
extern AddressDefaultTypeInternal _Address_default_instance_;
class AddressComponent;
class AddressComponentDefaultTypeInternal;
extern AddressComponentDefaultTypeInternal _AddressComponent_default_instance_;
}  // namespace YellowPages
PROTOBUF_NAMESPACE_OPEN
template<> ::YellowPages::Address* Arena::CreateMaybeMessage<::YellowPages::Address>(Arena*);
template<> ::YellowPages::AddressComponent* Arena::CreateMaybeMessage<::YellowPages::AddressComponent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace YellowPages {

enum AddressComponent_Type : int {
  AddressComponent_Type_COUNTRY = 0,
  AddressComponent_Type_REGION = 1,
  AddressComponent_Type_CITY = 2,
  AddressComponent_Type_STREET = 3,
  AddressComponent_Type_HOUSE = 4,
  AddressComponent_Type_AddressComponent_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AddressComponent_Type_AddressComponent_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AddressComponent_Type_IsValid(int value);
constexpr AddressComponent_Type AddressComponent_Type_Type_MIN = AddressComponent_Type_COUNTRY;
constexpr AddressComponent_Type AddressComponent_Type_Type_MAX = AddressComponent_Type_HOUSE;
constexpr int AddressComponent_Type_Type_ARRAYSIZE = AddressComponent_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AddressComponent_Type_descriptor();
template<typename T>
inline const std::string& AddressComponent_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AddressComponent_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AddressComponent_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AddressComponent_Type_descriptor(), enum_t_value);
}
inline bool AddressComponent_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AddressComponent_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AddressComponent_Type>(
    AddressComponent_Type_descriptor(), name, value);
}
// ===================================================================

class AddressComponent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:YellowPages.AddressComponent) */ {
 public:
  inline AddressComponent() : AddressComponent(nullptr) {}
  virtual ~AddressComponent();

  AddressComponent(const AddressComponent& from);
  AddressComponent(AddressComponent&& from) noexcept
    : AddressComponent() {
    *this = ::std::move(from);
  }

  inline AddressComponent& operator=(const AddressComponent& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddressComponent& operator=(AddressComponent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddressComponent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddressComponent* internal_default_instance() {
    return reinterpret_cast<const AddressComponent*>(
               &_AddressComponent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AddressComponent& a, AddressComponent& b) {
    a.Swap(&b);
  }
  inline void Swap(AddressComponent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddressComponent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddressComponent* New() const final {
    return CreateMaybeMessage<AddressComponent>(nullptr);
  }

  AddressComponent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddressComponent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddressComponent& from);
  void MergeFrom(const AddressComponent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressComponent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "YellowPages.AddressComponent";
  }
  protected:
  explicit AddressComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_address_2eproto);
    return ::descriptor_table_address_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AddressComponent_Type Type;
  static constexpr Type COUNTRY =
    AddressComponent_Type_COUNTRY;
  static constexpr Type REGION =
    AddressComponent_Type_REGION;
  static constexpr Type CITY =
    AddressComponent_Type_CITY;
  static constexpr Type STREET =
    AddressComponent_Type_STREET;
  static constexpr Type HOUSE =
    AddressComponent_Type_HOUSE;
  static inline bool Type_IsValid(int value) {
    return AddressComponent_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    AddressComponent_Type_Type_MIN;
  static constexpr Type Type_MAX =
    AddressComponent_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    AddressComponent_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return AddressComponent_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return AddressComponent_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return AddressComponent_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:YellowPages.AddressComponent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_address_2eproto;
};
// -------------------------------------------------------------------

class Address PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:YellowPages.Address) */ {
 public:
  inline Address() : Address(nullptr) {}
  virtual ~Address();

  Address(const Address& from);
  Address(Address&& from) noexcept
    : Address() {
    *this = ::std::move(from);
  }

  inline Address& operator=(const Address& from) {
    CopyFrom(from);
    return *this;
  }
  inline Address& operator=(Address&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Address& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Address* internal_default_instance() {
    return reinterpret_cast<const Address*>(
               &_Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Address& a, Address& b) {
    a.Swap(&b);
  }
  inline void Swap(Address* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Address* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Address* New() const final {
    return CreateMaybeMessage<Address>(nullptr);
  }

  Address* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Address>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Address& from);
  void MergeFrom(const Address& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Address* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "YellowPages.Address";
  }
  protected:
  explicit Address(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_address_2eproto);
    return ::descriptor_table_address_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentsFieldNumber = 2,
    kFormattedFieldNumber = 1,
    kCommentFieldNumber = 4,
    kCoordsFieldNumber = 3,
  };
  // repeated .YellowPages.AddressComponent components = 2;
  int components_size() const;
  private:
  int _internal_components_size() const;
  public:
  void clear_components();
  ::YellowPages::AddressComponent* mutable_components(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::YellowPages::AddressComponent >*
      mutable_components();
  private:
  const ::YellowPages::AddressComponent& _internal_components(int index) const;
  ::YellowPages::AddressComponent* _internal_add_components();
  public:
  const ::YellowPages::AddressComponent& components(int index) const;
  ::YellowPages::AddressComponent* add_components();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::YellowPages::AddressComponent >&
      components() const;

  // string formatted = 1;
  void clear_formatted();
  const std::string& formatted() const;
  void set_formatted(const std::string& value);
  void set_formatted(std::string&& value);
  void set_formatted(const char* value);
  void set_formatted(const char* value, size_t size);
  std::string* mutable_formatted();
  std::string* release_formatted();
  void set_allocated_formatted(std::string* formatted);
  private:
  const std::string& _internal_formatted() const;
  void _internal_set_formatted(const std::string& value);
  std::string* _internal_mutable_formatted();
  public:

  // string comment = 4;
  void clear_comment();
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  private:
  const std::string& _internal_comment() const;
  void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // .SphereProto.Coords coords = 3;
  bool has_coords() const;
  private:
  bool _internal_has_coords() const;
  public:
  void clear_coords();
  const ::SphereProto::Coords& coords() const;
  ::SphereProto::Coords* release_coords();
  ::SphereProto::Coords* mutable_coords();
  void set_allocated_coords(::SphereProto::Coords* coords);
  private:
  const ::SphereProto::Coords& _internal_coords() const;
  ::SphereProto::Coords* _internal_mutable_coords();
  public:
  void unsafe_arena_set_allocated_coords(
      ::SphereProto::Coords* coords);
  ::SphereProto::Coords* unsafe_arena_release_coords();

  // @@protoc_insertion_point(class_scope:YellowPages.Address)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::YellowPages::AddressComponent > components_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr formatted_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  ::SphereProto::Coords* coords_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_address_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddressComponent

// string value = 1;
inline void AddressComponent::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddressComponent::value() const {
  // @@protoc_insertion_point(field_get:YellowPages.AddressComponent.value)
  return _internal_value();
}
inline void AddressComponent::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:YellowPages.AddressComponent.value)
}
inline std::string* AddressComponent::mutable_value() {
  // @@protoc_insertion_point(field_mutable:YellowPages.AddressComponent.value)
  return _internal_mutable_value();
}
inline const std::string& AddressComponent::_internal_value() const {
  return value_.Get();
}
inline void AddressComponent::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddressComponent::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:YellowPages.AddressComponent.value)
}
inline void AddressComponent::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:YellowPages.AddressComponent.value)
}
inline void AddressComponent::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:YellowPages.AddressComponent.value)
}
inline std::string* AddressComponent::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddressComponent::release_value() {
  // @@protoc_insertion_point(field_release:YellowPages.AddressComponent.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddressComponent::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:YellowPages.AddressComponent.value)
}

// -------------------------------------------------------------------

// Address

// string formatted = 1;
inline void Address::clear_formatted() {
  formatted_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Address::formatted() const {
  // @@protoc_insertion_point(field_get:YellowPages.Address.formatted)
  return _internal_formatted();
}
inline void Address::set_formatted(const std::string& value) {
  _internal_set_formatted(value);
  // @@protoc_insertion_point(field_set:YellowPages.Address.formatted)
}
inline std::string* Address::mutable_formatted() {
  // @@protoc_insertion_point(field_mutable:YellowPages.Address.formatted)
  return _internal_mutable_formatted();
}
inline const std::string& Address::_internal_formatted() const {
  return formatted_.Get();
}
inline void Address::_internal_set_formatted(const std::string& value) {
  
  formatted_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Address::set_formatted(std::string&& value) {
  
  formatted_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:YellowPages.Address.formatted)
}
inline void Address::set_formatted(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  formatted_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:YellowPages.Address.formatted)
}
inline void Address::set_formatted(const char* value,
    size_t size) {
  
  formatted_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:YellowPages.Address.formatted)
}
inline std::string* Address::_internal_mutable_formatted() {
  
  return formatted_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Address::release_formatted() {
  // @@protoc_insertion_point(field_release:YellowPages.Address.formatted)
  return formatted_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Address::set_allocated_formatted(std::string* formatted) {
  if (formatted != nullptr) {
    
  } else {
    
  }
  formatted_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), formatted,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:YellowPages.Address.formatted)
}

// repeated .YellowPages.AddressComponent components = 2;
inline int Address::_internal_components_size() const {
  return components_.size();
}
inline int Address::components_size() const {
  return _internal_components_size();
}
inline void Address::clear_components() {
  components_.Clear();
}
inline ::YellowPages::AddressComponent* Address::mutable_components(int index) {
  // @@protoc_insertion_point(field_mutable:YellowPages.Address.components)
  return components_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::YellowPages::AddressComponent >*
Address::mutable_components() {
  // @@protoc_insertion_point(field_mutable_list:YellowPages.Address.components)
  return &components_;
}
inline const ::YellowPages::AddressComponent& Address::_internal_components(int index) const {
  return components_.Get(index);
}
inline const ::YellowPages::AddressComponent& Address::components(int index) const {
  // @@protoc_insertion_point(field_get:YellowPages.Address.components)
  return _internal_components(index);
}
inline ::YellowPages::AddressComponent* Address::_internal_add_components() {
  return components_.Add();
}
inline ::YellowPages::AddressComponent* Address::add_components() {
  // @@protoc_insertion_point(field_add:YellowPages.Address.components)
  return _internal_add_components();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::YellowPages::AddressComponent >&
Address::components() const {
  // @@protoc_insertion_point(field_list:YellowPages.Address.components)
  return components_;
}

// .SphereProto.Coords coords = 3;
inline bool Address::_internal_has_coords() const {
  return this != internal_default_instance() && coords_ != nullptr;
}
inline bool Address::has_coords() const {
  return _internal_has_coords();
}
inline const ::SphereProto::Coords& Address::_internal_coords() const {
  const ::SphereProto::Coords* p = coords_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SphereProto::Coords*>(
      &::SphereProto::_Coords_default_instance_);
}
inline const ::SphereProto::Coords& Address::coords() const {
  // @@protoc_insertion_point(field_get:YellowPages.Address.coords)
  return _internal_coords();
}
inline void Address::unsafe_arena_set_allocated_coords(
    ::SphereProto::Coords* coords) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coords_);
  }
  coords_ = coords;
  if (coords) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:YellowPages.Address.coords)
}
inline ::SphereProto::Coords* Address::release_coords() {
  
  ::SphereProto::Coords* temp = coords_;
  coords_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SphereProto::Coords* Address::unsafe_arena_release_coords() {
  // @@protoc_insertion_point(field_release:YellowPages.Address.coords)
  
  ::SphereProto::Coords* temp = coords_;
  coords_ = nullptr;
  return temp;
}
inline ::SphereProto::Coords* Address::_internal_mutable_coords() {
  
  if (coords_ == nullptr) {
    auto* p = CreateMaybeMessage<::SphereProto::Coords>(GetArena());
    coords_ = p;
  }
  return coords_;
}
inline ::SphereProto::Coords* Address::mutable_coords() {
  // @@protoc_insertion_point(field_mutable:YellowPages.Address.coords)
  return _internal_mutable_coords();
}
inline void Address::set_allocated_coords(::SphereProto::Coords* coords) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(coords_);
  }
  if (coords) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coords)->GetArena();
    if (message_arena != submessage_arena) {
      coords = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coords, submessage_arena);
    }
    
  } else {
    
  }
  coords_ = coords;
  // @@protoc_insertion_point(field_set_allocated:YellowPages.Address.coords)
}

// string comment = 4;
inline void Address::clear_comment() {
  comment_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Address::comment() const {
  // @@protoc_insertion_point(field_get:YellowPages.Address.comment)
  return _internal_comment();
}
inline void Address::set_comment(const std::string& value) {
  _internal_set_comment(value);
  // @@protoc_insertion_point(field_set:YellowPages.Address.comment)
}
inline std::string* Address::mutable_comment() {
  // @@protoc_insertion_point(field_mutable:YellowPages.Address.comment)
  return _internal_mutable_comment();
}
inline const std::string& Address::_internal_comment() const {
  return comment_.Get();
}
inline void Address::_internal_set_comment(const std::string& value) {
  
  comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Address::set_comment(std::string&& value) {
  
  comment_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:YellowPages.Address.comment)
}
inline void Address::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:YellowPages.Address.comment)
}
inline void Address::set_comment(const char* value,
    size_t size) {
  
  comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:YellowPages.Address.comment)
}
inline std::string* Address::_internal_mutable_comment() {
  
  return comment_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Address::release_comment() {
  // @@protoc_insertion_point(field_release:YellowPages.Address.comment)
  return comment_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Address::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:YellowPages.Address.comment)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace YellowPages

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::YellowPages::AddressComponent_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::YellowPages::AddressComponent_Type>() {
  return ::YellowPages::AddressComponent_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_address_2eproto
