// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalog.proto

#include "transport_catalog.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_database_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Database_database_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_router_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Router_router_2eproto;
namespace ProtoTransport {
class TransportCatalogDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransportCatalog> _instance;
} _TransportCatalog_default_instance_;
}  // namespace ProtoTransport
static void InitDefaultsscc_info_TransportCatalog_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProtoTransport::_TransportCatalog_default_instance_;
    new (ptr) ::ProtoTransport::TransportCatalog();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoTransport::TransportCatalog::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TransportCatalog_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TransportCatalog_transport_5fcatalog_2eproto}, {
      &scc_info_Database_database_2eproto.base,
      &scc_info_Router_router_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_transport_5fcatalog_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_transport_5fcatalog_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_transport_5fcatalog_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_transport_5fcatalog_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::TransportCatalog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::TransportCatalog, db_),
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::TransportCatalog, router_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ProtoTransport::TransportCatalog)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ProtoTransport::_TransportCatalog_default_instance_),
};

const char descriptor_table_protodef_transport_5fcatalog_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027transport_catalog.proto\022\016ProtoTranspor"
  "t\032\016database.proto\032\014router.proto\"`\n\020Trans"
  "portCatalog\022$\n\002db\030\001 \001(\0132\030.ProtoTransport"
  ".Database\022&\n\006router\030\002 \001(\0132\026.ProtoTranspo"
  "rt.Routerb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_transport_5fcatalog_2eproto_deps[2] = {
  &::descriptor_table_database_2eproto,
  &::descriptor_table_router_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_transport_5fcatalog_2eproto_sccs[1] = {
  &scc_info_TransportCatalog_transport_5fcatalog_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_transport_5fcatalog_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalog_2eproto = {
  false, false, descriptor_table_protodef_transport_5fcatalog_2eproto, "transport_catalog.proto", 177,
  &descriptor_table_transport_5fcatalog_2eproto_once, descriptor_table_transport_5fcatalog_2eproto_sccs, descriptor_table_transport_5fcatalog_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_transport_5fcatalog_2eproto::offsets,
  file_level_metadata_transport_5fcatalog_2eproto, 1, file_level_enum_descriptors_transport_5fcatalog_2eproto, file_level_service_descriptors_transport_5fcatalog_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_transport_5fcatalog_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_transport_5fcatalog_2eproto)), true);
namespace ProtoTransport {

// ===================================================================

void TransportCatalog::InitAsDefaultInstance() {
  ::ProtoTransport::_TransportCatalog_default_instance_._instance.get_mutable()->db_ = const_cast< ::ProtoTransport::Database*>(
      ::ProtoTransport::Database::internal_default_instance());
  ::ProtoTransport::_TransportCatalog_default_instance_._instance.get_mutable()->router_ = const_cast< ::ProtoTransport::Router*>(
      ::ProtoTransport::Router::internal_default_instance());
}
class TransportCatalog::_Internal {
 public:
  static const ::ProtoTransport::Database& db(const TransportCatalog* msg);
  static const ::ProtoTransport::Router& router(const TransportCatalog* msg);
};

const ::ProtoTransport::Database&
TransportCatalog::_Internal::db(const TransportCatalog* msg) {
  return *msg->db_;
}
const ::ProtoTransport::Router&
TransportCatalog::_Internal::router(const TransportCatalog* msg) {
  return *msg->router_;
}
void TransportCatalog::clear_db() {
  if (GetArena() == nullptr && db_ != nullptr) {
    delete db_;
  }
  db_ = nullptr;
}
void TransportCatalog::clear_router() {
  if (GetArena() == nullptr && router_ != nullptr) {
    delete router_;
  }
  router_ = nullptr;
}
TransportCatalog::TransportCatalog(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtoTransport.TransportCatalog)
}
TransportCatalog::TransportCatalog(const TransportCatalog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_db()) {
    db_ = new ::ProtoTransport::Database(*from.db_);
  } else {
    db_ = nullptr;
  }
  if (from._internal_has_router()) {
    router_ = new ::ProtoTransport::Router(*from.router_);
  } else {
    router_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ProtoTransport.TransportCatalog)
}

void TransportCatalog::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransportCatalog_transport_5fcatalog_2eproto.base);
  ::memset(&db_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&router_) -
      reinterpret_cast<char*>(&db_)) + sizeof(router_));
}

TransportCatalog::~TransportCatalog() {
  // @@protoc_insertion_point(destructor:ProtoTransport.TransportCatalog)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransportCatalog::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete db_;
  if (this != internal_default_instance()) delete router_;
}

void TransportCatalog::ArenaDtor(void* object) {
  TransportCatalog* _this = reinterpret_cast< TransportCatalog* >(object);
  (void)_this;
}
void TransportCatalog::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransportCatalog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransportCatalog& TransportCatalog::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransportCatalog_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void TransportCatalog::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoTransport.TransportCatalog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && db_ != nullptr) {
    delete db_;
  }
  db_ = nullptr;
  if (GetArena() == nullptr && router_ != nullptr) {
    delete router_;
  }
  router_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransportCatalog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ProtoTransport.Database db = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_db(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ProtoTransport.Router router = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_router(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransportCatalog::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoTransport.TransportCatalog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ProtoTransport.Database db = 1;
  if (this->has_db()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::db(this), target, stream);
  }

  // .ProtoTransport.Router router = 2;
  if (this->has_router()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::router(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoTransport.TransportCatalog)
  return target;
}

size_t TransportCatalog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoTransport.TransportCatalog)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ProtoTransport.Database db = 1;
  if (this->has_db()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *db_);
  }

  // .ProtoTransport.Router router = 2;
  if (this->has_router()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *router_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransportCatalog::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoTransport.TransportCatalog)
  GOOGLE_DCHECK_NE(&from, this);
  const TransportCatalog* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransportCatalog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoTransport.TransportCatalog)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoTransport.TransportCatalog)
    MergeFrom(*source);
  }
}

void TransportCatalog::MergeFrom(const TransportCatalog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoTransport.TransportCatalog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_db()) {
    _internal_mutable_db()->::ProtoTransport::Database::MergeFrom(from._internal_db());
  }
  if (from.has_router()) {
    _internal_mutable_router()->::ProtoTransport::Router::MergeFrom(from._internal_router());
  }
}

void TransportCatalog::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoTransport.TransportCatalog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportCatalog::CopyFrom(const TransportCatalog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoTransport.TransportCatalog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportCatalog::IsInitialized() const {
  return true;
}

void TransportCatalog::InternalSwap(TransportCatalog* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransportCatalog, router_)
      + sizeof(TransportCatalog::router_)
      - PROTOBUF_FIELD_OFFSET(TransportCatalog, db_)>(
          reinterpret_cast<char*>(&db_),
          reinterpret_cast<char*>(&other->db_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransportCatalog::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ProtoTransport
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ProtoTransport::TransportCatalog* Arena::CreateMaybeMessage< ::ProtoTransport::TransportCatalog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoTransport::TransportCatalog >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
