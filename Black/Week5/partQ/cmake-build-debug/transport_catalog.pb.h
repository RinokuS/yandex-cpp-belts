// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalog.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalog_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalog_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "database.pb.h"
#include "router.pb.h"
#include "renderer.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5fcatalog_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalog_2eproto;
namespace ProtoTransport {
class TransportCatalog;
class TransportCatalogDefaultTypeInternal;
extern TransportCatalogDefaultTypeInternal _TransportCatalog_default_instance_;
}  // namespace ProtoTransport
PROTOBUF_NAMESPACE_OPEN
template<> ::ProtoTransport::TransportCatalog* Arena::CreateMaybeMessage<::ProtoTransport::TransportCatalog>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ProtoTransport {

// ===================================================================

class TransportCatalog PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoTransport.TransportCatalog) */ {
 public:
  inline TransportCatalog() : TransportCatalog(nullptr) {}
  virtual ~TransportCatalog();

  TransportCatalog(const TransportCatalog& from);
  TransportCatalog(TransportCatalog&& from) noexcept
    : TransportCatalog() {
    *this = ::std::move(from);
  }

  inline TransportCatalog& operator=(const TransportCatalog& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportCatalog& operator=(TransportCatalog&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransportCatalog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransportCatalog* internal_default_instance() {
    return reinterpret_cast<const TransportCatalog*>(
               &_TransportCatalog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TransportCatalog& a, TransportCatalog& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportCatalog* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportCatalog* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransportCatalog* New() const final {
    return CreateMaybeMessage<TransportCatalog>(nullptr);
  }

  TransportCatalog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransportCatalog>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransportCatalog& from);
  void MergeFrom(const TransportCatalog& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportCatalog* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoTransport.TransportCatalog";
  }
  protected:
  explicit TransportCatalog(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbFieldNumber = 1,
    kRouterFieldNumber = 2,
    kRendererFieldNumber = 3,
  };
  // .ProtoTransport.Database db = 1;
  bool has_db() const;
  private:
  bool _internal_has_db() const;
  public:
  void clear_db();
  const ::ProtoTransport::Database& db() const;
  ::ProtoTransport::Database* release_db();
  ::ProtoTransport::Database* mutable_db();
  void set_allocated_db(::ProtoTransport::Database* db);
  private:
  const ::ProtoTransport::Database& _internal_db() const;
  ::ProtoTransport::Database* _internal_mutable_db();
  public:
  void unsafe_arena_set_allocated_db(
      ::ProtoTransport::Database* db);
  ::ProtoTransport::Database* unsafe_arena_release_db();

  // .ProtoTransport.Router router = 2;
  bool has_router() const;
  private:
  bool _internal_has_router() const;
  public:
  void clear_router();
  const ::ProtoTransport::Router& router() const;
  ::ProtoTransport::Router* release_router();
  ::ProtoTransport::Router* mutable_router();
  void set_allocated_router(::ProtoTransport::Router* router);
  private:
  const ::ProtoTransport::Router& _internal_router() const;
  ::ProtoTransport::Router* _internal_mutable_router();
  public:
  void unsafe_arena_set_allocated_router(
      ::ProtoTransport::Router* router);
  ::ProtoTransport::Router* unsafe_arena_release_router();

  // .ProtoTransport.Renderer renderer = 3;
  bool has_renderer() const;
  private:
  bool _internal_has_renderer() const;
  public:
  void clear_renderer();
  const ::ProtoTransport::Renderer& renderer() const;
  ::ProtoTransport::Renderer* release_renderer();
  ::ProtoTransport::Renderer* mutable_renderer();
  void set_allocated_renderer(::ProtoTransport::Renderer* renderer);
  private:
  const ::ProtoTransport::Renderer& _internal_renderer() const;
  ::ProtoTransport::Renderer* _internal_mutable_renderer();
  public:
  void unsafe_arena_set_allocated_renderer(
      ::ProtoTransport::Renderer* renderer);
  ::ProtoTransport::Renderer* unsafe_arena_release_renderer();

  // @@protoc_insertion_point(class_scope:ProtoTransport.TransportCatalog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ProtoTransport::Database* db_;
  ::ProtoTransport::Router* router_;
  ::ProtoTransport::Renderer* renderer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TransportCatalog

// .ProtoTransport.Database db = 1;
inline bool TransportCatalog::_internal_has_db() const {
  return this != internal_default_instance() && db_ != nullptr;
}
inline bool TransportCatalog::has_db() const {
  return _internal_has_db();
}
inline const ::ProtoTransport::Database& TransportCatalog::_internal_db() const {
  const ::ProtoTransport::Database* p = db_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ProtoTransport::Database*>(
      &::ProtoTransport::_Database_default_instance_);
}
inline const ::ProtoTransport::Database& TransportCatalog::db() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.TransportCatalog.db)
  return _internal_db();
}
inline void TransportCatalog::unsafe_arena_set_allocated_db(
    ::ProtoTransport::Database* db) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(db_);
  }
  db_ = db;
  if (db) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoTransport.TransportCatalog.db)
}
inline ::ProtoTransport::Database* TransportCatalog::release_db() {
  
  ::ProtoTransport::Database* temp = db_;
  db_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProtoTransport::Database* TransportCatalog::unsafe_arena_release_db() {
  // @@protoc_insertion_point(field_release:ProtoTransport.TransportCatalog.db)
  
  ::ProtoTransport::Database* temp = db_;
  db_ = nullptr;
  return temp;
}
inline ::ProtoTransport::Database* TransportCatalog::_internal_mutable_db() {
  
  if (db_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProtoTransport::Database>(GetArena());
    db_ = p;
  }
  return db_;
}
inline ::ProtoTransport::Database* TransportCatalog::mutable_db() {
  // @@protoc_insertion_point(field_mutable:ProtoTransport.TransportCatalog.db)
  return _internal_mutable_db();
}
inline void TransportCatalog::set_allocated_db(::ProtoTransport::Database* db) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(db_);
  }
  if (db) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(db)->GetArena();
    if (message_arena != submessage_arena) {
      db = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, db, submessage_arena);
    }
    
  } else {
    
  }
  db_ = db;
  // @@protoc_insertion_point(field_set_allocated:ProtoTransport.TransportCatalog.db)
}

// .ProtoTransport.Router router = 2;
inline bool TransportCatalog::_internal_has_router() const {
  return this != internal_default_instance() && router_ != nullptr;
}
inline bool TransportCatalog::has_router() const {
  return _internal_has_router();
}
inline const ::ProtoTransport::Router& TransportCatalog::_internal_router() const {
  const ::ProtoTransport::Router* p = router_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ProtoTransport::Router*>(
      &::ProtoTransport::_Router_default_instance_);
}
inline const ::ProtoTransport::Router& TransportCatalog::router() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.TransportCatalog.router)
  return _internal_router();
}
inline void TransportCatalog::unsafe_arena_set_allocated_router(
    ::ProtoTransport::Router* router) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(router_);
  }
  router_ = router;
  if (router) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoTransport.TransportCatalog.router)
}
inline ::ProtoTransport::Router* TransportCatalog::release_router() {
  
  ::ProtoTransport::Router* temp = router_;
  router_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProtoTransport::Router* TransportCatalog::unsafe_arena_release_router() {
  // @@protoc_insertion_point(field_release:ProtoTransport.TransportCatalog.router)
  
  ::ProtoTransport::Router* temp = router_;
  router_ = nullptr;
  return temp;
}
inline ::ProtoTransport::Router* TransportCatalog::_internal_mutable_router() {
  
  if (router_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProtoTransport::Router>(GetArena());
    router_ = p;
  }
  return router_;
}
inline ::ProtoTransport::Router* TransportCatalog::mutable_router() {
  // @@protoc_insertion_point(field_mutable:ProtoTransport.TransportCatalog.router)
  return _internal_mutable_router();
}
inline void TransportCatalog::set_allocated_router(::ProtoTransport::Router* router) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(router_);
  }
  if (router) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(router)->GetArena();
    if (message_arena != submessage_arena) {
      router = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, router, submessage_arena);
    }
    
  } else {
    
  }
  router_ = router;
  // @@protoc_insertion_point(field_set_allocated:ProtoTransport.TransportCatalog.router)
}

// .ProtoTransport.Renderer renderer = 3;
inline bool TransportCatalog::_internal_has_renderer() const {
  return this != internal_default_instance() && renderer_ != nullptr;
}
inline bool TransportCatalog::has_renderer() const {
  return _internal_has_renderer();
}
inline const ::ProtoTransport::Renderer& TransportCatalog::_internal_renderer() const {
  const ::ProtoTransport::Renderer* p = renderer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ProtoTransport::Renderer*>(
      &::ProtoTransport::_Renderer_default_instance_);
}
inline const ::ProtoTransport::Renderer& TransportCatalog::renderer() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.TransportCatalog.renderer)
  return _internal_renderer();
}
inline void TransportCatalog::unsafe_arena_set_allocated_renderer(
    ::ProtoTransport::Renderer* renderer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(renderer_);
  }
  renderer_ = renderer;
  if (renderer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoTransport.TransportCatalog.renderer)
}
inline ::ProtoTransport::Renderer* TransportCatalog::release_renderer() {
  
  ::ProtoTransport::Renderer* temp = renderer_;
  renderer_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProtoTransport::Renderer* TransportCatalog::unsafe_arena_release_renderer() {
  // @@protoc_insertion_point(field_release:ProtoTransport.TransportCatalog.renderer)
  
  ::ProtoTransport::Renderer* temp = renderer_;
  renderer_ = nullptr;
  return temp;
}
inline ::ProtoTransport::Renderer* TransportCatalog::_internal_mutable_renderer() {
  
  if (renderer_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProtoTransport::Renderer>(GetArena());
    renderer_ = p;
  }
  return renderer_;
}
inline ::ProtoTransport::Renderer* TransportCatalog::mutable_renderer() {
  // @@protoc_insertion_point(field_mutable:ProtoTransport.TransportCatalog.renderer)
  return _internal_mutable_renderer();
}
inline void TransportCatalog::set_allocated_renderer(::ProtoTransport::Renderer* renderer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(renderer_);
  }
  if (renderer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(renderer)->GetArena();
    if (message_arena != submessage_arena) {
      renderer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, renderer, submessage_arena);
    }
    
  } else {
    
  }
  renderer_ = renderer;
  // @@protoc_insertion_point(field_set_allocated:ProtoTransport.TransportCatalog.renderer)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoTransport

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalog_2eproto
